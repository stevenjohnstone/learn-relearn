---
title: "Computer Experiments"
toc: true
toc-location: body
execute:
    freeze: true
    cache: true
description: "Solutions to exercises and computer experiments"
format:
    html:
        code-fold: false
        html-math-method: mathjax
---

## 7.1 Simulating SDEs

```{python}
import numpy as np
import matplotlib.pyplot as plt

class BrownianMotion:
  def __init__(self, start, end, increments):
    self.increments = increments
    self.delta = (end -start)/increments
    self.samples = np.cumsum(np.r_[0, np.random.default_rng().normal(0, np.sqrt(self.delta), increments -1)])

  def milstein(self, initial, volatility, dVolatility, drift):
    integral = np.zeros(len(self.samples))
    integral[0] = initial
    for i in range(1, len(self.samples)):
      prev = integral[i-1]
      increment = self.samples[i] - self.samples[i-1]
      try:
        integral[i] = prev + volatility(prev)*increment + drift(prev)*self.delta +(1/2)*(volatility(prev)*dVolatility(prev)*(increment**2 - self.delta))
      except FloatingPointError:
        return integral[:i]

    return integral

  def euler_maruyama(self, initial, volatility, dVolatility, drift):
    integral = np.zeros(len(self.samples))
    integral[0] = initial
    for i in range(1, len(self.samples)):
      prev = integral[i-1]
      increment = self.samples[i] - self.samples[i-1]
      try:
        integral[i] = prev + volatility(prev)*increment + drift(prev)*self.delta
      except FloatingPointError:
        return integral[:i]
    return integral

  def riemann(self, fn):
    return np.cumsum(self.delta*fn(self.samples[:-1]))
  
  def ito(self, fn):
    return np.cumsum([ fn(i*self.delta, self.samples[i])*(self.samples[i+1] - self.samples[i]) for i in range(len(self.samples) -1) ])


paths = 100

def geometric_brownian_motion():
  fig, axs = plt.subplots(3, 2)
  x_axis = np.linspace(0, 1, 100)
  fig.suptitle('Geometric Brownian Motion')
  for i, mu in enumerate([-1/2, -2, 0]):
    volatility = lambda x: x
    dVolatility = lambda _: 1
    drift = lambda x: x*(mu + 1/2)
    for _ in range(paths):
      bm = BrownianMotion(0, 1, 100)
      euler_maruyama = bm.euler_maruyama(1, volatility, dVolatility, drift)
      milstein = bm.milstein(1, volatility, dVolatility, drift)
      axs[i, 0].plot(x_axis, euler_maruyama)
      axs[i, 1].plot(x_axis, milstein)
      axs[i, 0].set_title(f'Euler-Maruyama $\mu={mu}$')
      axs[i, 1].set_title(f'Milstein $\mu={mu}$')
  plt.tight_layout()
  plt.show()

def ornstein_uhlenbeck(): 
  fig, axs = plt.subplots(1, 2)
  x_axis = np.linspace(0, 1, 100)
  fig.suptitle('Ornstein-Uhlenbeck')
  for _ in range(paths):
    bm = BrownianMotion(0, 1, 100)
    volatility = lambda x: 1
    dVolatility = lambda _: 0
    drift = lambda x: -x
    euler_maruyama = bm.euler_maruyama(1, volatility, dVolatility, drift)
    milstein = bm.milstein(1, volatility, dVolatility, drift)
    axs[0].plot(x_axis, euler_maruyama)
    axs[1].plot(x_axis, milstein)
    axs[0].set_title(f'Euler-Maruyama')
    axs[1].set_title(f'Milstein')
  plt.tight_layout()
  plt.show()

import sympy as sp

def diffusion_example(): 
  from sympy.abc import x
  volatility = sp.sqrt(1 + x**2)
  dVolatility = sp.diff(volatility, x)
  volatility, dVolatility = sp.lambdify(x, volatility), sp.lambdify(x, dVolatility)
  drift = lambda x: np.sin(x)
  fig, axs = plt.subplots(1, 2)
  x_axis = np.linspace(0, 1, 100)
  fig.suptitle('Diffusion Example')
  for _ in range(paths):
    bm = BrownianMotion(0, 1, 100)
    euler_maruyama = bm.euler_maruyama(1, volatility, dVolatility, drift)
    milstein = bm.milstein(1, volatility, dVolatility, drift)
    axs[0].plot(x_axis, euler_maruyama)
    axs[1].plot(x_axis, milstein)
    axs[0].set_title(f'Euler-Maruyama')
    axs[1].set_title(f'Milstein')
  plt.tight_layout()

geometric_brownian_motion()
ornstein_uhlenbeck()
diffusion_example()

```

## 7.2 Euler vs Milstein

```{python}
increments = [10, 100, 1000, 10000]
euler_errors = np.empty(len(increments))
milstein_errors = np.empty(len(increments))

volatility = lambda x: x
dVolatility = lambda _: 1
drift = lambda x: x/2

for i, inc in enumerate(increments):
  milstein_error, euler_error = 0, 0
  for _ in range(100):
    bm = BrownianMotion(0, 1, inc)
    S1 = np.exp(bm.samples[-1])
    milstein_error += np.abs(bm.milstein(1, volatility, dVolatility, drift)[-1] - S1)
    euler_error += np.abs(bm.euler_maruyama(1, volatility, dVolatility, drift)[-1] - S1)
  milstein_errors[i] = (milstein_error/100)
  euler_errors[i] = (euler_error/100)

plt.plot(increments, milstein_errors, label='Milstein')
plt.plot(increments, euler_errors, label='Euler-Maruyama')
plt.xscale('log')
plt.legend(loc='best')
plt.show()
```
::: {.callout-note}
The question appears to be incorrect:

$$
S_t = \exp(B_t -1/2)
$$
is the Geometric Brownian motion with $\mu = -1/2$.
:::

## 7.3 The CIR Model
#### (a)

$$
dZ_t = (a - Z_t) dt + \sqrt{Z_t} dB_t
$$

```{python}
class NonNegativeFunction:
  def __init__(self, fn):
    self.negative = False
    self.fn = fn
  def __call__(self, x):
    if x < 0:
      self.negative = True
      return 0
    return self.fn(x)

paths = 10

volatility = NonNegativeFunction(np.sqrt)
dVolatlity = NonNegativeFunction(lambda x: (1/2)*(1/np.sqrt(x)))
for a in [0.1, 0.25, 10]:
  drift = NonNegativeFunction(lambda x: a - x)
  for _ in range(paths):
    bm = BrownianMotion(0, 1, 1000)
    path = bm.milstein(1, volatility, dVolatility, drift)
    plt.plot(path)
  plt.title(f'a = {a}')
  plt.show()
```
#### (b)
```{python}
paths = 1000


from IPython.display import display_markdown

table = '''| a | Proportion Negative |
|:--|----:|'''

for a in [0.1, 0.25, 10]:
  negatives = 0
  for _ in range(paths):
    bm = BrownianMotion(0, 1, 1000)
    volatility = NonNegativeFunction(lambda x: np.sqrt(x))
    drift = NonNegativeFunction(lambda x: a - x)
    path = bm.milstein(1, volatility, dVolatility, drift)
    if volatility.negative or drift.negative:
      negatives += 1
  table += f'\n|{a} | {negatives/paths}|'

display_markdown(table, raw = True)
  
```

#### (c)

```{python}
a = 10
paths = 10
increments = 1000
start, end = 0, 10
drift = lambda x: a - x
for _ in range(paths):
  bm = BrownianMotion(start, end, increments)
  path = bm.milstein(1, volatility, dVolatility, drift)
  plt.plot(np.linspace(start, end, increments), path)
plt.show()
```

Note that paths oscillate around the value $10$.

#### (d)


```{python}
a = 10
paths = 100
increments = 1000
start, end = 0, 10
drift = lambda x: a - x
Z10 = 0
for _ in range(paths):
  bm = BrownianMotion(start, end, increments)
  Z10 += bm.milstein(1, volatility, dVolatility, drift)[-1]
display_markdown(f'Average of $Z_{{10}}$ on $100$ paths for $a = 10$ is ${Z10/paths}$', raw = True)
```

## 7.4 Bessel Process

The Bessel process with dimension $d > 1$ is the diffusion with SDE
$$
\begin{align}
d R_t = d B_t + \frac{d -1}{2 R_t} dt &, R_0 > 0.
\end{align}
$$

```{python}
paths = 100
start, end, increments = 0, 1, 1000
volatility = lambda _: 1
dVolatility = lambda _: 0

table = '''| d | Negative | Total |
| :--- | ----: | --: |'''

for d in [2, 3, 10]:
  negatives = 0
  for _ in range(paths):
    bm = BrownianMotion(start, end, increments)
    v = NonNegativeFunction(volatility)
    drift = NonNegativeFunction(lambda x: (d - 1)/(2*x))
    plt.plot(np.linspace(start, end, increments), bm.euler_maruyama(1, v, dVolatility, drift))
    negatives += (v.negative or drift.negative)
  table += f'\n| {d} | {negatives} | {paths} |'
  plt.title(f'd = {d}')
  plt.show()

display_markdown(table, raw = True)
```

## 7.5 Explosion Time

```{python}
paths = 100
volatility = lambda x : np.exp(x)
def volatility(x):
  with np.errstate(over='raise'):
    return np.exp(x)

dVolatility = volatility
drift = lambda _: 0

start, end, increments = 0, 1, 100
delta = (end - start)/increments

for _ in range(paths):
  bm = BrownianMotion(start, end, increments)
  path = bm.euler_maruyama(0, volatility, dVolatlity, drift)
  if len(path) != increments:
    # there was an explosion
    plt.axvline(x = len(path)*delta, color='r', label=f'explosion at {len(path)*delta}')
  else:
    plt.plot(np.linspace(start, end, increments), bm.euler_maruyama(0, volatility, dVolatility, drift))
plt.ylim(-100, 100)
plt.legend(loc='best')
plt.show()

# sample a single path
bm = BrownianMotion(start, end, increments)
path = bm.euler_maruyama(0, volatility, dVolatility, drift)
plt.plot(path)
plt.show()
```

## 7.6 A Martingale

```{python}
paths = 10
start, end, increments = 0, 1, 1000

for _ in range(paths):
  bm = BrownianMotion(start, end, increments)
  plt.plot(bm.riemann(lambda x: x**2))

plt.title("(a)")
plt.show()
```

```{python}
for _ in range(paths):
  bm = BrownianMotion(start, end, increments)
  X = bm.ito(lambda _, x: x)
  plt.plot(X**2 - bm.riemann(lambda x: x**2))
plt.title("(b)")
plt.show()
```
